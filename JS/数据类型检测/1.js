/***
 * 数据类型检测：
 * typeof
 *   - typeof(value) 返回一个字符串，字符串中包含对应的数据类型
 * 局限性
 *   - typeof null  -> "object"
 *   - typeof 检测对象，除函数对象会返回“function”，其余对象返回的都是“object”[不能细分对象]
 *   - typeof 检测一个未被声明的变量，不会报错，结果是“undefined”
 * 原理：
 *   - 所有数据类型在计算机底层都是按照二进制的值进行存储的，而typeof就是按照二进制的值进行检测的
 *   - 性能好
 *   - 对象的二进制开头都是“000”，而null的二进制值都是“0”,所以typeof检测null的时候，识别其是一个对象（这样是不对的）;
 *   - 如果识别为对象，再看对象是否实现了call方法，实现了call方法的返回“function”，没有实现的统一返回“object”
 * 应用：
 *   - 检测除null之外的原始值类型可以使用
 *   - 检测是否为对象： if(obj !== null && /^(object|function)$/.test(typeof obj)){....}
 *   - 检测某个东西是否兼容 if(typeof Symbol !== "undefined"){....}
 * 
 * ****************************************************************************************************************
 * 
 * instanceof
 *     [对象] instanceof [构造函数] 检测对象是否为这个类的实例，基于这个特点可以临时拿来检测数据类型
 *     作用：
 *        对typeof做一个补充，可以适当的细分一下对象
 *     局限性：
 *        对原始值类型无效：instanceof/
 *     let obj = [10,20];
 *     console.log(obj instanceof Array) true
 *     console.log(obj instanceof RegExg) false
 *     console.log(obj instanceof Object) true
 * 
 * 
 * ****************************************************************************************************************
 * 
 * constructor 
 * 
 * ****************************************************************************************************************
 * 
 * Object.prototype.toString.call([value])
 * 
 * ****************************************************************************************************************
 * 
 * ---------
 * 
 * Array.isArray 检测是否为数组
 * isNaN 检测是否为数字
*/
 